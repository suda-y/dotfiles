#+TITLE: Emacsの設定
# -*- code: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+STARTUP: overview fold
#+OPTIONS: auto-id:t H:6
#+DATE: 2023-02-10 09:40:00
* はじめに

ここでは自分のEmacsの設定について纏めています。
作成するにおいては以下のサイトを参照しています。
- [[https://emacs-jp.github.io/tips/emacs-in-2020][2020年代からのEmacs入門]]
- [[https://uwabami.github.io/cc-env/Emacs.html][Emacsの設定]]
- [[https://www.grugrut.net/posts/my-emacs-init-el/][My Emacs Config]]
- [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7][Emacs入門から始めるleaf.el入門]]
マニュアル
- [[https://takaxp.github.io/org-ja.html][Org Mode マニュアル]]

** 設定は[[http://orgmode.org/][Org mode]]([[https://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]])で書く。

[[https://uwabami.github.io/cc-env/Emacs.html][Emacsの設定]]を参考に、本フィアル[[file:~/.emacs.d/INIT.org][INIT.org]]から、Makefile内の以下のスクリプトで
=eary-init.el= 及び =init.el= を生成し、byte-compile します。
#+begin_src makefile-gmake :tangle no
  # -*- mode: makefile -*-
  EMACS	?= emacs

  EL	= early-init.el
  ELC	= $(EL:%.el=%.elc)

  all:	$(ELC) init.elc

  $(EL):	init.el
  init.el:	README.org
	  $(EMACS) -Q -q --batch --eval \
	    "(progn \
	      (require 'ob-tangle) \
	      (org-babel-tangle-file \"$<\" \"$@\" \"emacs-lisp\"))"
	  $(EMACS) -q -l init.el --batch --eval '(kill-emacs)'
  %.elc:	%.el
	  $(EMACS) -q -l init.el --batch -f batch-byte-compile $<

  clean:
	  rm -rf auto-save-list custom.el *.elc *~
#+end_src
** [[https://github.com/conao3/leaf.el][leaf.el]]でEmacsのパッケージの導入及び設定を行う。

* early-init.el
Emacs >= 27 からの機能
** ヘッダー
*** タイトル
#+begin_src emacs-lisp :tangle early-init.el
  ;;; early-init.el --            -*- coding: utf-8; lexical-binding: t -*-
  ;; Author: suda <suda-y@yamashita-denki.co.jp>
  ;; URL:
  ;; Version: 1.00
  
#+end_src

*** LICENSE
#+begin_src emacs-lisp :tangle early-init.el
  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
#+end_src

** 本体
*** コメント
#+begin_src emacs-lisp :tangle early-init.el
  ;;; Comentary:

  ;;; Code:

#+end_src

*** init 処理中に問題があれば気付けるように
#+begin_src emacs-lisp :tangle early-init.el
  (setq debug-on-error t)
  (setq init-file-debug t)
#+end_src
*** 描画高速化
#+begin_src emacs-lisp :tangle early-init.el
  ;; 右から左に読む言語に対応させないことで描画高速化
  (setq-default bidi-disolay-reordering nil)
#+end_src
*** Magic File Name を一時的に無効化
これだけで 0.2秒縮まったそうだ。
#+begin_src emacs-lisp :tangle early-init.el
  (defconst my:saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq file-name-handler-alist my:saved-file-name-handler-alist)))
#+end_src
*** Garbage Collection(GC) の設定
起動時に garbate collection を発生させないようにする。

#+begin_src emacs-lisp :tangle early-init.el
  ;; GC 関連
  (defconst my:default-gc-cons-threshold gc-cons-threshold)
  (setq gc-cons-threshold most-positive-fixnum)
  ;; Run GC every 60 secnds if emacs is idle.
  (run-with-idle-timer 60.0 t #'garbage-collect)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold my:default-gc-cons-threshold)))
#+end_src

*** GUI の見た目設定
ツールバーは使わないので表示しない。メニューバーは残している。
#+begin_src emacs-lisp :tangle early-init.el
  (tool-bar-mode 0)			;; ツールバーを表示しない。
  ; (set-scroll-bar-mode nil)		;; スクロールバーは保留
#+end_src

#+begin_src emacs-lisp :tangle early-init.el
  (defun reset-frame-parameter (frame)
    (sleep-for 0.1)
    (set-frame-parameter frame 'height 50))
  (add-hook 'after-make-frame-functions #'reset-frame-parameter)
#+end_src

起動時のウィンドウサイズなど
#+begin_src emacs-lisp :tangle early-init.el
  ;; 起動時のウィンドウサイズなど
  (if (boundp 'window-system)
      (setq default-frame-alist
	    (append (list
		     '(width  . 90)	        ; ウィンドウ幅
		     '(height . 50)	        ; ウィンドウ高さ
		     '(font   . "VL Gothic-11") ; VL ゴシック 11pt
		     )
		    default-frame-alist)
	    ))
  (setq initial-frame-alist default-frame-alist)
#+end_src


# **** 日本語フォントを
# #+begin_src emacs-lisp :tangle early-init.el
#   (when (eq system-type 'windows-nt)
#     (setq default-frame-alist
# 	  (append (list
# 		   '(font . "HackGen Console NFJ-11"))
# 		  default-frame-alist))
#     ;; (set-face-attribute 'default nil :family "HackGen Console NFJ" :height 110)
#     ;; (set-fontset-font nil '(#x80 . #x10ffff) (font-spec :family "HackGen Console NFJ"))
#     )
# #+end_src

*** ワーニング抑制、他
#+begin_src emacs-lisp :tangle early-init.el
  ;; native-compのワーニング抑制
  ;; (custom-set-variables '(warning-suppress-types '((comp))))
  ;; カスタムファイル
  (custom-set-variables
   '(custom-file (expand-file-name "custom.el" user-emacs-directory)))
#+end_src
** フッター
#+begin_src emacs-lisp :tangle early-init.el

  (provide 'early-init)
  ;; early-init.el ends here
#+end_src

* init.el
** ヘッダー
*** タイトル
#+begin_src emacs-lisp :tangle init.el
  ;;; init.el --                    -*- coding: utf-8; lexical-binding: t -*-
  ;; Author: suda <suda-y@yamashita-denki.co.jp>
  ;; URL: https://github.com/suda-y/dotfiles/
  ;; Version: 1.00
  
#+end_src

*** LICENSE
#+begin_src emacs-lisp :tangle init.el
  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
#+end_src

** 前処理
*** コメント
#+begin_src emacs-lisp :tangle init.el
  ;;; Comentary:

  ;;; Code:

#+end_src

*** ディレクトリ構成の修正
 分割した設定ファイル群やpackageでinstallしたパッケージの置き場所は
=user-emacs-direcotry= 以下にまとめています。
 ディレクトリ構成は以下のようにしました。
#+begin_example
~/.emacs.d/
 |-- Makefile     ← byte-compile用のrule
 |-- INIT.org     ← 本ファイル。'org-babel-tangle'でearly-init.el、init.elを生成
 |-- pkg/
 |   |-- elpa/    ← package.el で導入したパッケージが置かれる場所
 |   `-- el-get/  ← el-get で導入したパッケージが置かれる場所
 `-- share/       ← (基本的に)参照するだけの資源置き場所
~/.cache/emacs    ← 一時ファイルの置き場所
#+end_example
上記ディレクトリ構成を設定ファイルで使用するために、ディレクトリ配置を宣言して
おきます。
#+begin_src emacs-lisp :tangle init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
	    (expand-file-name
	     (file-name-directory (or load-file-name byte-compile-current-file))))))

  ;; (when load-file-name
  ;;   (setq user-emacs-directory
  ;;         (expand-file-name (file-name-directory load-file-name))))
  (defconst my:d:share
    (expand-file-name "share/" user-emacs-directory))
  (defconst my:d:tmp
    (expand-file-name ".cache/emacs/" (getenv "HOME")))
  (unless (file-directory-p my:d:tmp)
    (make-directory my:d:tmp))
  (defconst my:d:pkg:elpa
    (expand-file-name "pkg/elpa" user-emacs-directory))
  (defconst my:d:pkg:elget
    (expand-file-name "pkg/el-get" user-emacs-directory))
#+end_src

その他、良く使うディレクトリもここで設定します。（今はなし）
*** load-path の追加
#+begin_src emacs-lisp :tangle init.el
  (add-to-list 'load-path
	       (expand-file-name "elisp" user-emacs-directory))
#+end_src

*** Package及びleaf関連
いろいろ書き換え予定
#+begin_src emacs-lisp :tangle init.el
  (eval-and-compile
    (custom-set-variables
     '(package-archives '(("org"   . "https://orgmode.org/elpa/")
			  ("melpa" . "https://melpa.org/packages/")
			  ("gnu"   . "http://elpa.gnu.org/packages/")
			 ))
     ;; '(packages-gnupghome-dir (expand-file-name ".gnupg" (getenv "HOME")))
     '(package-user-dir my:d:pkg:elpa)
     )
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want use :bydra, :el-get, :blackout, ...
      (leaf hydra :ensure t)
      (leaf el-get
	:ensure t
	:preface
	(defconst el-get-dir my:d:pkg:elget) ;; override el-get default
	:custom ((el-get-notify-type       . 'message)
		 (el-get-get-shallow-clone . t)))
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords
      (leaf-keywords-init)))
#+end_src	  
*** early-init.el の読み込み
Emacs26 以前の場合は =eraly-init.el= が使えないので手動で読み込む。
#+begin_src emacs-lisp :tangle init.el
  ;; early-init.el の読み込み
  (leaf early-init
    :doc ""
    :emacs< "27.1"
    :config
    (load (concat user-emacs-directory "early-init.el"))
    )
#+end_src

** 本体
#+begin_src emacs-lisp :tangle init.el
  ;; ここにいっぱい設定を書く
  ;; (setq load-path (cons "~/.emacs.d/" load-path))
  ;; (require 'w32-symlinks)
#+end_src
*** leaf 用便利ツール
**** leaf-convert、leaf-tree
- leaf-convert はプレーンなElispやuse-packageからleafへ変換機能を提供します。
- leaf-tree は leaf.el で書かれた init.el を開き、M-x leaf-tree-mode を実行
  こでクリック出来るサイドバーを表示します。
#+begin_src emacs-lisp :tangle init.el
  ;; leaf 用便利ツール
  (leaf leaf
    :config
    (leaf leaf-convert :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
	       (imenu-list-option . 'left)))
    )
#+end_src
  
**** macrostep
leaf に限らず、マクロを１ステップごとに展開することができます。
#+begin_src emacs-lisp :tangle init.el
  (leaf macrostep
    :ensure t
    :bind (("C-c e" . macrostep-expand)))
#+end_src
*** 言語の設定
最近のEmacsはlocateから文字コードを自動判別するらしい。
#+begin_src emacs-lisp :tangle init.el
  ;; 言語設定
  (leaf general-setting
    :config
    (set-language-environment "Japanese")
    (prefer-coding-system 'utf-8)		; 極力UTF-8とする
    :setq ((quail-japanese-use-double-n . t))
    )
#+end_src
**** 日本語関連 (cp5022x.el)
Emacs23から内がUnicodeベースになっています。

しかし文字コードの変換はGNU libcのiconvをベースにしてるため、機種依存文字を
含む文字コードの変換をうまく行えません。 そこで言語設定前にcp5022x.elをインストール
することにしています。
#+begin_src emacs-lisp :tangle init.el
  (leaf cp5022x
    :ensure t
    :require t
    :config
    (set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
			  'katakana-jisx0201 'iso-8859-1 'unicode)
    (set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)
    )
#+end_src

**** 日本語入力設定
#+begin_src emacs-lisp :tangle init.el
  (leaf ime
    :config
    ;; Windows 日本語設定
    (leaf windows
      :when (eq system-type 'windows-nt)
      :defvar (w32-ime-mode-line-state-indicator-list
	       w32-ime-composition-window)
      :defun (w32-ime-wrap-function-to-control-ime
	      w32-ime-initialize)
      :config
      (leaf tr-ime
	:doc "Enulator of IME path for Windows"
	:req "emacs-27.1" "w32-ime-0.0.1"
	:tag "emacs>=27.1"
	:url "https://github.com/trueroad/tr-emacs-ime-module"
	:added "2022-12-15"
	:ensure t
	:defun tr-ime-advanced-install
	:config (tr-ime-advanced-install)
	(cond ((and (boundp 'tr-ime-enabled-features)
		    (eq tr-ime-enabled-features 'standard))
	       ;; standard 環境用
	       (message "tr-ime standrd"))
	      ((and (boundp 'tr-ime-enabled-features)
		    (eq tr-ime-enabled-features 'advanced))
	       ;; advanced 環境用
	       (message "tr-ime advanced"))
	      ((or (subrp (symbol-function 'ime-get-mode))
		   (and (fboundp 'tr-ime-detect-ime-patch-p)
			(tr-ime-detect-ime-patch-p)))
	       ;; IMEパッチ環境用
	       (message "IME patched"))
	      (t
	       ;; いずれでもない環境用
	       (message "others")))
	)
      ;; IME のデフォルトをIMEに設定
      (setq default-input-method "W32-IME")
      ;; IME のモードライン表示設定
      (setq-default w32-ime-mode-line-state-indicator "[--]")
      (setq w32-ime-mode-line-state-indicator-list
	    '("[--]" "[あ]" "[--]"))
      ;; IME 初期化
      (w32-ime-initialize)
      (w32-ime-wrap-function-to-control-ime 'universal-argument)
      (w32-ime-wrap-function-to-control-ime 'read-string)
      (w32-ime-wrap-function-to-control-ime 'read-char)
      (w32-ime-wrap-function-to-control-ime 'read-from-minibuffer)
      (w32-ime-wrap-function-to-control-ime 'y-or-n-p)
      (w32-ime-wrap-function-to-control-ime 'yes-or-no-p)
      (w32-ime-wrap-function-to-control-ime 'map-y-or-n-p)
      (w32-ime-wrap-function-to-control-ime 'register-read-with-preview)
      (set-frame-font "HackGen Console NFJ-11" nil t)
      (modify-all-frames-parameters '((ime-font . "HackGen Console NFJ-11")))
      (add-hook 'isearch-mode-hook
		(lambda nil
		  (setq w32-ime-composition-window (minibuffer-window))))
      (add-hook 'isearch-mode-end-hook
		(lambda nil
		  (setq w32-ime-composition-window nil)))
      )
    ;; Linux 日本語設定
    (leaf linux
      :when (eq system-type 'gnu/linux)
      :config
      (leaf mozc
	:doc "minor mode to input Japanese with Mozc"
	:added "2022-12-15"
	:ensure t
	:require mozc
	:bind (([zenkaku-hankaku C-\\] . toggle-input-method))
	:custom ((default-input-method . "japanese-mozc")
		 (mozc-leim-title . "♡かな"))
	:init
	(leaf mozc-temp
	  :ensure t
	  :bind* ("<henkan>" . mozc-temp-convert))
	)
      )
    ;; BSD 日本語設定
    (leaf BSD
      :when (eq system-type 'berkeley-unix)
      :config
      (leaf mozc
	:doc "minor mode to input Japanese with Mozc"
	:added "2022-12-22"
	:ensure t
	:require mozc
	:bind (([zenkaku-hankaku C-\\] . toggle-input-method))
	:custom ((default-input-method . "japanese-mozc")
		 (mozc-helper-program-name . "/usr/local/libexec/mozc_emacs_helper")
		 (mozc-leim-title . "♡かな"))
	:init
	(leaf mozc-temp
	  :ensure t
	  :bind* ("<henkan>" . mozc-temp-convert))
	)
      )
    )

#+end_src
*** Emacs 標準添付パッケージの設定
Emacsには多くの標準添付パッケージがあります。また、C言語で書かれたコア部分に
ついても、Elispから設定できます。
**** cus-edit.c
leafの=:custom=で設定するとinit.elにcustomが勝手に設定を追記します。
この状況になると、変数の二重管理となってしまうので、customがinit.elに
記載しないように設定します。
#+begin_src emacs-lisp :tangle init.el
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :added "2023-02-10"
    :custom `((custom-file . , (locate-user-emacs-file "custom.el")))
    )
#+end_src
なお、動的な値をleafで設定するには上記のようにバッククオートとカンマを使うことによって
実現しています。

**** cus-start.c
Emacs のC言語部分で定義されている変数を=custom=で扱えるようにまとめている
ファイルです。
#+begin_src emacs-lisp :tangle init.el
  (leaf cus-start
    :doc "define customization properties of builtins"
    :tag "builtin" "internal"
    :added "2023-02-10"
    :preface
    (defun c/redraw-frame nil
      (interactive)
      (redraw-frame))
    :bind (("M-ESC ESC" . c/redraw-frame))
    :custom '((user-full-name . "Yuji -TAMOTSU- Suda")
	      (user-mail-address . "suda-y@yamashita-denki.co.jp")
	      (user-login-name . "suda")
	      ;;
	      (frame-resize-pixelwise . t)
	      (history-length . 1000)
	      (history-delete-duplicates . t))
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)
    )  
#+end_src

**** autorevert
Emacs の外でファイルが書き換った時に自動的に読み直すマイナーモード
#+begin_src emacs-lisp :tangle init.el
  (leaf autorevert
    :doc "revert buffers when files on disk change"
    :tag "builtin"
    :added "2023-02-10"
    :custom ((auto-revert-inerval . 1))
    :global-minor-mode global-auto-revert-mode)
#+end_src

**** cc-mode
Cやそれに似た構文を持つファイルに関する設定です。かなり細かな設定が出来ます。
#+begin_src emacs-lisp :tangle init.el
  (leaf cc-mode
    :doc "major mode for editing C and similar languages"
    :tag "builtin"
    :added "2023-02-10"
    :defvar (c-basic-offset)
    :bind (c-mode-base-map
	   ("C-c c" . compile))
    :mode-hook
    (c-mode-hook . ((c-set-style "k&r")
		    (setq c-basic-offset 4)
		    (c-set-offset 'case-label '*)
		    (c-set-offset 'statement-case-intro '*)))
    (c++mode-hook . ((c-set-style "bsd")
		     (setq c-basic-offset 4)))
    )
  
#+end_src

**** delsel
選択している状態で入力したときに、region を削除して挿入するマイナーモード
**** paren
対応するカッコを強調するマイナーモード
#+begin_src emacs-lisp :tangle init.el
  (leaf paren
    :doc "highlight matching paren"
    :tag "builtin"
    :added "2023-02-10"
    :custom ((show-paren-delay . 0.1))
    :global-minor-mode show-paren-mode)
  
#+end_src

**** simple
kill-ringの数を抑制したり、kill-lineの挙動を変更したりします。
#+begin_src emacs-lisp :tangle init.el
  (leaf simple
    :doc "basic editing commands for Emacs"
    :tag "builtin" "internal"
    :added "2023-02-10"
    :custom ((kill-ring-max . 100)
	     (kill-read-only-ok . t)
	     (kill-whole-line . t)
	     (eval-expression-print-length . nil)
	     (eval-expression-print-level . nil))
    )
#+end_src

**** files
単にdisableするのではなく、バックアップファイルを一箇所に集める。
**** startup
startup は起動は静かに。自動保存ファイルに関しては保留。
#+begin_src emacs-lisp :tangle init.el
  ;; startup 起動は静かに
  (leaf startup
    :doc "process Emacs shell arguments"
    :tag "builtin" "internal"
    :custom '((inhibit-startup-screen . t)
	      ;; (inhibit-startup-message . t)
	      (inhibit-startup-echo-area-message . t)
	      ;; (initial-scratch-message . nil)
	      )
    )
#+end_src

*** ivy
[[https://github.com/abo-abo/swiper][ivy]]はミニバッファの補完を強化するパッケージです。
#+begin_src emacs-lisp :tangle init.el
  (leaf ivy
    :doc "Incremental Vertical completYon"
    :req "emacs-24.5"
    :tag "matching" "emacs>=24.5"
    :url "https://github.com/abo-abo/swiper"
    :added "2023-02-10"
    :emacs>= 24.5
    :ensure t
    :blackout t
    :leaf-defer nil
    :custom ((ivy-initial-inputs-alist . nil)
	     (ivy-use-selectable-prompt .t ))
    :global-minor-mode t)
  
#+end_src
# *** flycheck
# [[https://www.flycheck.org/][flycheck]]はリアルタイムにソースにエラーやワーニングを表示するマイナーモードです。
# #+begin_src emacs-lisp :tangle init.el
#   (leaf flycheck
#     :doc "On-the-fly syntax checking"
#     :req "dash-2.12.1" "pkg-info-0.4" "let-alist-1.0.4" "seq-1.11" "emacs-24.3"
#     :tag "tools" "languages" "convenience" "emacs>=24.3"
#     :url "http://www.flycheck.org"
#     :added "2023-02-10"
#     :emacs>= 24.3
#     :ensure t
#     :bind (("M-n" . flycheck-next-error)
# 	   ("M-p" . flycheck-previous-error))
#     :global-minor-mode global-flycheck-mode)
# #+end_src

*** company
[[http://company-mode.github.io/][company]]は入力補完の為のパッケージです。
他エディタではインテリセンスと呼ばれているものと同一の機能を提供します。
#+begin_src emacs-lisp :tangle init.el
  (leaf company
    :doc "Modular text completion framework"
    :req "emacs-25.1"
    :tag "matching" "convenience" "abbrev" "emacs>=25.1"
    :url "http://company-mode.github.io/"
    :added "2023-02-10"
    :emacs>= 25.1
    :ensure t
    :leaf-defer nil
    ;; :hook ((text-mode-hook python-mode-hook emacs-ilsp-mode-hook)
    ;; 	 ;; (text-mode-hook) 他は各モードの方で設定
    ;; 	 (emacs-lisp-mode-hook . (lambda ()
    ;; 				   (set (make-local-variable 'company-backends)
    ;; 					'(company-semantic company-files company-elisp company-dabbrev-code))))
    ;; 	 (org-mode-hook . (lambda ()
    ;; 			    (set (make-local-variable 'company-backends)
    ;; 				 '(company-ispell company-dabbrev company-yasnippet company-files))))
    ;; 	 )
    :bind ((company-active-map
	    ("M-n" . nil)
	    ("M-p" . nil)
	    ("C-s" . company-filter-candidates)
	    ("C-n" . company-select-next)
	    ("C-p" . company-select-previous)
	    ("<tab>" . company-complete-selection))
	   (company-search-map
	    ("C-n" . company-select-next)
	    ("C-p" . company-select-previous)))
    :custom ((company-idle-delay . 0)
	     (company-minimum-prefix-length . 1)
	     (company-transformers . '(company-sort-by-occurrence)))
    :global-minor-mode global-company-mode
    )
#+end_src

#+begin_src emacs-lisp :tangle init.el
  (leaf company-c-headers
    :doc "Company mode backend for C/C++ header files"
    :req "emacs-24.1" "company-0.8"
    :tag "company" "development" "emacs>=24.1"
    :added "2023-02-10"
    :emacs>= 24.1
    :ensure t
    :after company
    :defvar company-backends
    :config
    (add-to-list 'company-backends 'company-c-headers)
    )
#+end_src

*** yasnippet
yasnippetは、テンプレートの挿入を提供しているパッケージです。
これはPython以外の言語でも使えます。
Pythonのテンプレートは[[https://github.com/AndreaCrott/yasnippet-snippets/treemaster/nippets/python-mode][yasnippet-snippetsのpython-mode]]を参照下さい。
#+begin_src emacs-lisp :tangle init.el
#+end_src

*** Python 関連
#+begin_src emacs-lisp :tangle init.el
  (leaf python-mode
    :doc "Python major mode"
    :tag "oop" "languages" "python"
    :url "https://gitlab.com/groups/python-mode-devs"
    :added "2023-02-10"
    :ensure t
    :after "elgot"
    :mode "\\.py$"
    :interpreter "python"
    :require eglot
    :hook ((python-mode-hook . eglot-ensure)
	   (python-mode-hook . (lambda () (add-hook 'before-save-hook
						    'python-block-buffer nil t)))
	   (python-mode-hook . (lambda () (add-hook 'before-save-hook
						    'python-isort-buffer nil t))))
    )
#+end_src
#+begin_src emacs-lisp :tangle init.el
  (leaf lsp-mode
    :doc "LSP mode"
    :tag "languages" "emacs>=26.3"
    :url "https://github.com/emacs-lsp/lsp-mode"
    :added "2023-02-10"
    :ensure t
    :commands (lsp lsp-deferred)
    :config
    :custom ((lsp-keymap-prefix . "C-c l")
	     (lsp-log-io . t)
	     (lsp-keep-workspace-alive . nil)
	     (lsp-document-sync-method . 2)
	     (lsp-response-timeout . 5)
	     (lsp-enable-file-watchers . nil))
    :hook (lsp-mode-hook . lsp-headerline-breadcrumb-mode)
    :init (leaf lsp-ui
	    :doc "UI modules for lsp-mode"
	    :req "emacs-26.1" "dash-2.18.0" "lsp-mode-6.0" "markdown-mode-2.3"
	    :tag "tools" "languages" "emacs>=26.1"
	    :url "https://github.com/emacs-lsp/lsp-ui"
	    :added "2023-02-10"
	    :ensure t
	    :after lsp-mode markdown-mode
	    :custom ((lsp-ui-doc-enable . t)
		     (lsp-ui-doc-position . 'at-point)
		     (lsp-ui-doc-header . t)
		     (lsp-ui-doc-include-signature . t)
		     (lsp-ui-doc-max-width . 150)
		     (lsp-ui-doc-max-height . 30)
		     (lsp-ui-doc-use-childframe . nil)
		     (lsp-ui-doc-use-webkit . nil)
		     (lsp-ui-peek-enable . t)
		     (lsp-ui-peek-peek-height . 20)
		     (lsp-ui-peek-list-width . 50))
	    :bind ((lsp-ui-mode-map ([remap xref-find-definitions] .
				     lsp-ui-peek-find-definitions)
				    ([remap xref-find-references] .
				     lsp-ui-peek-find-references))
		   (lsp-mode-map ("C-c s" . lsp-ui-sideline-mode)
				 ("C-c d" . lsp-ui-doc-mode)))
	    :hook ((lsp-mode-hook . lsp-ui-mode)))
    :after spinner markdown-mode lv eldoc)

#+end_src

#+begin_src emacs-lisp :tangle init.el
  (leaf lsp-pyright
    :doc "Python LSP client using Pyright"
    :req "emacs-26.1" "lsp-mode-7.0" "dash-2.18.0" "ht-2.0"
    :tag "lsp" "tools" "languages" "emacs>=26.1"
    :url "https://github.com/emacs-lsp/lsp-pyright"
    :added "2023-02-10"
    :ensure t
    :hook (python-mode-hook . (lambda ()
				(require 'lsp-pyright)
				(lsp-deferred)))
    :after lsp-mode
    )
#+end_src

**** Git関連
#+begin_src  emacs-lisp :tangle init.el
  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :tag "vc" "tools" "git" "emacs>=25.1"
    :url "https://github.com/magit/magit"
    :added "2023-11-30"
    :emacs>= 25.1
    :ensure t
    ;; :bind (("^Xg" . magit-status))
    :after compat git-commit magit-section with-editor
    )
#+end_src

*** キーバインド
#+begin_src emacs-lisp :tangle init.el
  ;; キーバインド設定
  (leaf-keys (("C-h"    . backward-delete-char)
	      ("C-c ;"  . comment-region)
	      ("C-c M-;". uncomment-region)
	      ("<home>" . beginning-of-buffer)
	      ("M-g"    . goto-line)
	      ("M-p"    . compile)
	      ))
#+end_src

** フッター
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)

  ;; Local Variables:
  ;; indeint-tabs-mode: t
  ;; End:

  ;; init.el    ends here
#+end_src

